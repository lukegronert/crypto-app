import {useEffect, useState} from 'react';
import {GoogleSpreadsheet} from 'google-spreadsheet';

const {REACT_APP_SHEET_ID} = process.env;
const {REACT_APP_GOOGLE_CLIENT_EMAIL} = process.env;
const {REACT_APP_GOOGLE_PRIVATE_KEY} = process.env;

const doc = new GoogleSpreadsheet(REACT_APP_SHEET_ID);

(async function() {
  await doc.useServiceAccountAuth({
      // env var values are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      client_email: REACT_APP_GOOGLE_CLIENT_EMAIL,
      private_key: REACT_APP_GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    });
  await doc.loadInfo(); // loads document properties and worksheets
  console.log(doc.title);
}())

export default function Portfolio({user}) {
    const [userTotal, setUserTotal] = useState(0)
    const [userPurchases, setUserPurchases] = useState([])
    const [userSales, setUserSales] = useState([])
    const [userCoinTotals, setUserCoinTotals] = useState([])

    const getUserTotal = async () => {
        const sheet1 = doc.sheetsByIndex[0]
        const sheet1Rows = await sheet1.getRows()
        sheet1Rows.map(row => {
            if(row.name === user) {
                setUserTotal(user.total)
            }
        })
    }
    const getUserPurchases = async () => {
        const sheet2 = doc.sheetsByIndex[1];
        const sheet2Rows = sheet2.getRows();
        let purchasesArray = []
        await sheet2Rows.map(row => {
            if(row.user === user) {
                purchasesArray.push({coin: row.coin, price: row.price, total: row.total})
            }
        })
        setUserPurchases(purchasesArray)
    }
    const getUserSales = async () => {
        const sheet4 = doc.sheetsByIndex[3];
        const sheet4Rows = sheet4.getRows();
        let salesArray = []
        await sheet4Rows.map(row => {
            if(row.user === user) {
                salesArray.push({coin: row.coin, price: row.price, total: row.total})
            }
        })
        setUserSales(salesArray)
    }
    const getUserCoinTotals = async () => {
        const sheet3 = doc.sheetsByIndex[2];
        const sheet3Rows = sheet3.getRows();
        let coinTotalsArray = []
        await sheet3Rows.map(row => {
            if(row.user === user) {
                coinTotalsArray.push({coin: row.coin, total: row.total})
            }
        })
        setUserCoinTotals(coinTotalsArray)
    }

    useEffect(() => {
        console.log('rerender')
    }, [])
    
    if(user) {
        return (
            <section>
                <h1>{user}</h1>
            </section>
        )
    } else {
        return (
            <section>
                <h1>Login to view your portfolio</h1>
            </section>
        )
    }
}